# Generated by Django 4.0.3 on 2023-12-14 04:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Category Name must be longer than 2 characters')], verbose_name='Name')),
                ('slug', models.SlugField(unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Category Slug must be longer than 2 characters')], verbose_name='Slug')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Description')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Updated On')),
            ],
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('message', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Contact Us',
            },
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Developer name must be longer than 2 characters')], verbose_name='Name')),
                ('slug', models.SlugField(unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Developer slug must be longer than 2 characters')], verbose_name='Slug')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Description')),
                ('website', models.URLField(blank=True, max_length=250, null=True, verbose_name='Website')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Title')),
                ('news_view', models.TextField(blank=True, null=True, verbose_name='Post')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Posted On')),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Publisher name must be longer than 2 characters')], verbose_name='Name')),
                ('slug', models.SlugField(unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Publisher slug must be longer than 2 characters')], verbose_name='Slug')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Description')),
                ('website', models.URLField(blank=True, max_length=250, null=True, verbose_name='Website')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70, unique=True, validators=[django.core.validators.MinLengthValidator(5, 'Product Name must be longer than 2 characters')], verbose_name='Title')),
                ('slug', models.SlugField(max_length=70, unique=True, validators=[django.core.validators.MinLengthValidator(5, 'Product Slug must be longer than 2 characters')], verbose_name='Slug')),
                ('long_description', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(15000, 'The value is too long.')], verbose_name='Description')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0, 'Price must be greater than 0.'), django.core.validators.MaxValueValidator(10000, 'Price must be less than 10000.')], verbose_name='Price')),
                ('stock', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, 'Stock must be greater than 0.'), django.core.validators.MaxValueValidator(5000, 'Stock must be less than 5000.')], verbose_name='Stock')),
                ('image', models.ImageField(upload_to='products/images/')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Out of Stock', 'Out of Stock')], default='Active', max_length=25)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Updated On')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='administrator.category', verbose_name='Category')),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrator.developer', verbose_name='Developer')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrator.publisher', verbose_name='Publisher')),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Purchased On')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrator.product', verbose_name='Games')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrator.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'Wishlist',
                'unique_together': {('user', 'product')},
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, 'Quantity must be greater than 0.'), django.core.validators.MaxValueValidator(5, 'Quantity must be less than 5.')], verbose_name='Quantity')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created On')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrator.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'Cart',
                'unique_together': {('user', 'product')},
            },
        ),
    ]
